@page "/"
@using CotdQualifierRank.Application.Services
@using CotdQualifierRank.Application.Utils
@using CotdQualifierRank.Domain.DomainPrimitives
@using CotdQualifierRank.Domain.Models
@inject NavigationManager NavManager
@inject CompetitionService CompetitionService
@inject IJSRuntime JsRuntime

<PageTitle>COTD Qualifier Rank</PageTitle>

<div style="display: none">
<FluentGrid OnBreakpointEnter="@OnBreakpointEnter"></FluentGrid>
</div>

@if (!FilterAnomalous)
{
    <h1>Cup of the Day - @_currentMonth.ToMonthAndYearString()</h1>
}
else
{
    <h1>Cup of the Day</h1>
    <h2>
        Anomalous Leaderboards <span title="Anomalous COTDs are those with empty or otherwise incomplete leaderboards">&#9432;</span>
    </h2>
}

@if (!FilterAnomalous)
{
    <div class="d-flex">
        <FluentSpacer/>
        <div class="d-flex">
            @if (_currentMonth.Year != _oldestMonth.Year || _currentMonth.Month != _oldestMonth.Month)
            {
                <FluentButton IconStart="@(new Icons.Filled.Size20.ChevronDoubleLeft())"
                              Appearance="Appearance.Lightweight"
                              Class="mx-1"
                              OnClick="async () => await HandleNavigation(_oldestMonth)"/>
                <FluentButton IconStart="@(new Icons.Filled.Size20.ChevronLeft())"
                              Appearance="Appearance.Lightweight"
                              Class="mx-1"
                              OnClick="async () => await HandleNavigation(_currentMonth.AddMonths(-1))">
                    <div style="min-width: 77px">
                        @NewPageMonth(-1, true)
                    </div>
                </FluentButton>
            }
            @if (_currentMonth != _newestMonth)
            {
                <FluentButton Class="mx-1"
                              Appearance="Appearance.Lightweight"
                              IconEnd="@(new Icons.Filled.Size20.ChevronRight())"
                              OnClick="async () => await HandleNavigation(_currentMonth.AddMonths(1))">
                    <div style="min-width: 80px">
                        @NewPageMonth(1, true)
                    </div>
                </FluentButton>
                <FluentButton Class="mx-1"
                              Appearance="Appearance.Lightweight"
                              IconEnd="@(new Icons.Filled.Size20.ChevronDoubleRight())"
                              OnClick="async () => await HandleNavigation(_newestMonth)"/>
            }
        </div>
    </div>
}

<FluentDataGrid Items="_competitions.AsQueryable()">
    <PropertyColumn Title="Date" Property="c => c.Date.ToShortDayString()"/>
    @if (!_isMobile)
    {
    <PropertyColumn Title="Player Count" Property="c => c.PlayerCount"/>
    <PropertyColumn Title="Competition ID" Property="c => c.NadeoCompetitionId"/>
    <PropertyColumn Title="Challenge ID" Property="c => c.NadeoChallengeId"/>
    <TemplateColumn Width="300px" Title="Map UID">
        <code class="mapuid-code">@context.NadeoMapUid</code>
    </TemplateColumn>
    }
    <TemplateColumn Width="100px">
        <FluentButton Appearance="Appearance.Accent"
                      OnClick='@(() => NavManager.NavigateTo($"./details/{context.Id}"))'>
            Details
        </FluentButton>
    </TemplateColumn>
</FluentDataGrid>

<div class="filter-container">
    <div class="d-flex">
        <a class="pe-2" href="" @onclick="HandleToggleFilterAnomalous">
            @if (FilterAnomalous)
            {
                <div>Show all COTDs</div>
            }
            else
            {
                <div>Show only anomalous COTDs</div>
            }
        </a>
        <div title="Anomalous COTDs are those with empty or otherwise incomplete leaderboards">&#9432;</div>
    </div>
</div>

@code {

    [SupplyParameterFromQuery(Name = "anomalous")]
    public bool FilterAnomalous { get; set; }

    [SupplyParameterFromQuery(Name = "month")]
    public string Month { get; set; } = "";

    private readonly DateTime _oldestMonth = new(2020, 11, 1);
    private readonly DateTime _newestMonth = new(DateTime.Now.Year, DateTime.Now.Month, 1);

    private CompetitionModel[] _competitions = [];
    private DateTime _currentMonth = new(DateTime.Now.Year, DateTime.Now.Month, 1);
    private bool _isMobile;

    private void OnBreakpointEnter(GridItemSize size)
    {
        _isMobile = size < GridItemSize.Md;
    }

    protected override void OnInitialized()
    {
        if (TryParseMonthQueryParameter(Month, out DateTime monthDateTime))
            _currentMonth = monthDateTime;
        FetchData();
    }

    private void FetchData()
    {
        var year = _currentMonth.Year;
        var month = _currentMonth.Month;

        // todo create error page
        if (!CompetitionYear.IsValid(year) || !CompetitionMonth.IsValid(month))
            NavManager.NavigateTo("/error");

        var compsAndPlayerCounts =
            CompetitionService.GetCompetitionListDTO(new CompetitionYear(year), new CompetitionMonth(month), filterAnomalous: FilterAnomalous);
        _competitions = compsAndPlayerCounts.Competitions;
    }

    private bool TryParseMonthQueryParameter(string? monthString, out DateTime month)
    {
        month = DateTime.Now;
        if (string.IsNullOrWhiteSpace(monthString))
            return false;

        var dateComponents = monthString.Split("-");
        if (dateComponents.Length != 2)
            return false;

        if (int.TryParse(dateComponents[0], out int parsedYear) && int.TryParse(dateComponents[1], out int parsedMonth))
        {
            if (!CompetitionYear.IsValid(parsedYear) || !CompetitionMonth.IsValid(parsedMonth))
                return false;
            month = new DateTime(parsedYear, parsedMonth, 1);
            return true;
        }

        return false;
    }

    private string NewPageMonth(int monthsToAdd, bool getMonthName = false)
    {
        var currentMonth = new DateTime(_currentMonth.Year, _currentMonth.Month, 1);
        var newMonth = currentMonth.AddMonths(monthsToAdd);
        if (!getMonthName)
            return newMonth.ToPageMonthString();
        return newMonth.ToMonthString();
    }

    private async Task HandleNavigation(DateTime month)
    {
        await JsRuntime.InvokeVoidAsync("unfocus");
        _currentMonth = month;
        FetchData();
        var uri = NavManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>
            {
                ["anomalous"] = null,
                ["month"] = (string?)$"{_currentMonth.Year}-{_currentMonth.Month}"
            }
        );
        NavManager.NavigateTo(uri, false);
    }

    private void HandleToggleFilterAnomalous()
    {
        FilterAnomalous = !FilterAnomalous;
        FetchData();

        var uri = NavManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>
            {
                ["anomalous"] = FilterAnomalous ? true : null,
                ["month"] = null
            }
        );
        NavManager.NavigateTo(uri, false);
    }

}
