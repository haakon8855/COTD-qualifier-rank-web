@page "/details/{id}"
@using CotdQualifierRank.Application.Services
@using CotdQualifierRank.Domain.DomainPrimitives
@using CotdQualifierRank.Domain.Models
@inject CompetitionService CompService
@inject NavigationManager NavManager
@inject IJSRuntime JsRuntime

<PageTitle>COTD Qualifier Rank</PageTitle>

<h1>Cup of the Day - @Competition.Date.DayOfWeek @Competition.Date.ToString("dd.MM.yyyy")</h1>

<div>
    <h4>Qualification Leaderboard</h4>
    <hr/>

    <div class="container">
        <div class="row">
            <div class="col-lg-6">
                <dl class="row">
                    <dt class="col-sm-4">
                        Date
                    </dt>
                    <dd class="col-sm-8">
                        @Competition.Date.ToString("dd.MM.yyyy")
                    </dd>
                    <dt class="col-sm-4">
                        Player Count
                    </dt>
                    <dd class="col-sm-8">
                        @_playerCount
                    </dd>
                    <dt class="col-sm-4">
                        Competition Id
                    </dt>
                    <dd class="col-sm-8">
                        <a
                            target="_blank"
                            aria-label="Open competition number @Competition.NadeoCompetitionId on Trackmania.io"
                            href="@($"https://trackmania.io/#/cotd/{Competition.NadeoCompetitionId}")"
                        >
                            @Competition.NadeoCompetitionId
                        </a>
                    </dd>
                    <dt class="col-sm-4">
                        Challenge Id
                    </dt>
                    <dd class="col-sm-8">
                        @Competition.NadeoChallengeId
                    </dd>
                    <dt class="col-sm-4">
                        Map UID
                    </dt>
                    <dd class="col-sm-8">
                        <pre class="mapUid">
                        <a
                            target="_blank"
                            aria-label="Open corresponding map on Trackmania.io (MapUID: @Competition.NadeoMapUid)"
                            href="@($"https://trackmania.io/#/leaderboard/{Competition.NadeoMapUid}")"
                        >
                        <code>
                                    @Competition.NadeoMapUid
                                </code>
                            </a>
                        </pre>
                    </dd>
                </dl>
            </div>

            @if (Competition.Leaderboard is not null &&
                 Competition.Leaderboard.Count > 0)
            {
                <div class="col-lg-6">
                    <div>
                        <div class="d-flex align-items-center mb-4">
                            <FluentNumberField
                                Size="10"
                                @bind-Value="SearchBoxTime"
                                Placeholder="Your PB (ms)"/>
                            <FluentButton Class="mx-2" Appearance="Appearance.Accent" OnClick="HandleSearchTime">
                                Get rank
                            </FluentButton>
                            <FluentButton
                                Appearance="Appearance.Lightweight"
                                OnClick="HandleSearchTimeRank">
                                Rank API
                            </FluentButton>
                            </div>

                        @if (_rankStatistics is not null)
                        {
                            <dl class="row">
                                <dt class="col-sm-6">
                                    Time:
                                </dt>
                                <dd class="col-sm-6">
                                    @(_rankStatistics?.Time.FormattedTime())

                                    @if (Competition.Leaderboard is not null)
                                    {
                                        <span class="first-seed-difference">
                                        (@((_rankStatistics!.Time - Competition.Leaderboard[0]).FormattedDiffTime()))
                                    </span>
                                    }
                                </dd>
                                <dt class="col-sm-6">
                                    Rank:
                                </dt>
                                <dd class="col-sm-6">
                                    @_rankStatistics!.Rank
                                </dd>
                                <dt class="col-sm-6">
                                    Division:
                                </dt>
                                <dd class="col-sm-6">
                                    @(((@_rankStatistics!.Rank - 1) / 64) + 1)
                                </dd>
                            </dl>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<hr/>

@if (Competition.Leaderboard is not null &&
     Competition.Leaderboard.Count > 0)
{
    <FluentStack Orientation="Orientation.Vertical">
        <h3>Division @(_paginationState.CurrentPageIndex + 1)</h3>

        @if (_isMobile)
        {
            <div>
                <dl>
                    @if (PageNo > 1)
                    {
                        <dt class="col-sm-12">Division @(PageNo - 1) Cutoff</dt>
                        <dd class="col-sm-12">@_pageStatistics?.BetterDivCutoff</dd>
                    }
                    <dt class="col-sm-12">Division @PageNo Cutoff</dt>
                    <dd class="col-sm-12">@_pageStatistics?.CurrentDivCutoff</dd>
                    <dt class="col-sm-12">Division @PageNo Window</dt>
                    <dd class="col-sm-12">@_pageStatistics?.CurrentDivWindow</dd>
                    @if (PageNo == _pageCount)
                    {
                        <dt class="col-sm-12">Division @PageNo Size</dt>
                        <dd class="col-sm-12">@(PaginatedLeaderboard.Count)</dd>
                    }
                </dl>
            </div>
        }

        <div style='@($"display: flex; justify-content: center; " + (_isMobile ? "width: 100%;" : ""))'>
            <FluentPaginator Style="margin-bottom: 20px" CurrentPageIndexChanged="(pageNo) => HandlePageChange(pageNo)"
                             State="_paginationState">
                <SummaryTemplate/>
                <PaginationTextTemplate>
                    <strong>@(_paginationState.CurrentPageIndex + 1)</strong> of
                    <strong>@(_paginationState.LastPageIndex + 1)</strong>
                </PaginationTextTemplate>
            </FluentPaginator>
        </div>
    </FluentStack>

    <FluentGrid OnBreakpointEnter="@OnBreakpointEnter" Justify="JustifyContent.SpaceBetween">
        <FluentGridItem Class="mb-4" xs="12" sm="12" md="6">
            <FluentDataGrid Items="Competition.Leaderboard.Select((time, i) => (Time: time, Index: i)).AsQueryable()"
                            GenerateHeader="GenerateHeaderOption.None" Pagination="_paginationState">
                <PropertyColumn Property="c => c.Index + 1"/>
                <PropertyColumn Width="100px" Property="c => c.Time.FormattedTime()"/>
                <PropertyColumn Width="100px"
                                Class="first-seed-difference"
                                Property='c => c.Index == 0 ? "" : FirstSeedDifference[c.Index].FormattedDiffTime()'/>
            </FluentDataGrid>
        </FluentGridItem>

        @if (!_isMobile)
        {
            <FluentGridItem sm="12" md="4">
                <div>
                    <dl class="row">
                        @if (PageNo > 1)
                        {
                            <dt class="col-sm-6">Division @(PageNo - 1) Cutoff</dt>
                            <dd class="col-sm-6">@_pageStatistics?.BetterDivCutoff</dd>
                        }
                        <dt class="col-sm-6">Division @PageNo Cutoff</dt>
                        <dd class="col-sm-6">@_pageStatistics?.CurrentDivCutoff</dd>
                        <dt class="col-sm-6">Division @PageNo Window</dt>
                        <dd class="col-sm-6">@_pageStatistics?.CurrentDivWindow</dd>
                        @if (PageNo == _pageCount)
                        {
                            <dt class="col-sm-6">Division @PageNo Size</dt>
                            <dd class="col-sm-6">@(PaginatedLeaderboard.Count)</dd>
                        }
                    </dl>
                </div>
            </FluentGridItem>
        }
    </FluentGrid>
}

@code {
    [Parameter] public string? Id { get; set; }

    [SupplyParameterFromQuery(Name = "page")]
    public int PageNo { get; set; } = 1;

    public int? SearchBoxTime { get; set; } = null;

    private const int PageSize = 64;

    private readonly PaginationState _paginationState = new() { ItemsPerPage = PageSize };

    public CompetitionModel Competition { get; set; }
    private List<Time> PaginatedLeaderboard { get; set; } = [];
    private List<Time> FirstSeedDifference { get; set; } = [];
    private PageStatistics? _pageStatistics;
    private RankStatistics? _rankStatistics;

    private int _pageCount;
    private int _playerCount;
    private bool _isMobile;

    private void OnBreakpointEnter(GridItemSize size)
    {
        _isMobile = size < GridItemSize.Md;
    }

    protected override async Task OnInitializedAsync()
    {
        if (PageNo < 1)
            PageNo = 1;

        if (Id is null || !int.TryParse(Id, out int idInt) || !CompetitionId.IsValid(idInt))
        {
            NavManager.NavigateTo("/", true);
            return;
        }

        var competition = CompService.GetCompetition(new CompetitionId(idInt));
        if (competition?.Leaderboard is null)
        {
            NavManager.NavigateTo("/", true);
            return;
        }

        _playerCount = competition.Leaderboard.Count;
        _pageCount = (int)Math.Ceiling((double)_playerCount / PageSize);
        if (PageNo > _pageCount)
            PageNo = _pageCount;

        competition.Leaderboard.Sort();
        Competition = competition;

        PopulateLeaderboardFromPageNo();
        CalculateStatistics();
        await _paginationState.SetCurrentPageIndexAsync(PageNo - 1);

        SearchBoxTime = null;
    }

    private void PopulateLeaderboardFromPageNo()
    {
        if (Competition?.Leaderboard is null)
        {
            NavManager.NavigateTo("/", true);
            return;
        }

        PaginatedLeaderboard = Competition.Leaderboard.Skip((PageNo - 1) * PageSize).Take(PageSize).ToList();
    }

    private void CalculateStatistics()
    {
        if (Competition.Leaderboard is null || Competition.Leaderboard.Count == 0)
            return;

        // Calculate cutoff time of the division above
        var betterDivCutoff = PageNo == 1 ? Competition.Leaderboard[0] : Competition.Leaderboard[(PageNo - 1) * PageSize - 1];

        // Calculate cutoff of current division
        var currentDivCutoff = PaginatedLeaderboard.Last();

        // Calculate window of current division
        var currentDivWindow = currentDivCutoff - betterDivCutoff;

        _pageStatistics = new(betterDivCutoff.FormattedTime(), currentDivCutoff.FormattedTime(), currentDivWindow.FormattedTime());

        // Calculate first seed difference
        var firstSeed = Competition.Leaderboard[0];
        FirstSeedDifference = Competition.Leaderboard.Select(r => r - firstSeed).ToList();
    }

    private void HandleSearchTime()
    {
        if (SearchBoxTime is null || !Time.IsValid((int)SearchBoxTime))
            return;
        var time = new Time((int)SearchBoxTime);
        var rankDTO = RankService.GetRank(Competition, time);
        _rankStatistics = new(rankDTO.Rank, time);
    }

    private void HandleSearchTimeRank()
    {
        var time = SearchBoxTime;
        if (SearchBoxTime is null || SearchBoxTime == 0)
            time = 45000;
        var uri = $"./api/rank/{Competition.NadeoMapUid}/{time}";
        NavManager.NavigateTo(uri, true);
    }

    private void HandlePageChange(int pageNo)
    {
        PageNo = pageNo;
        PopulateLeaderboardFromPageNo();
        var uri = NavManager.GetUriWithQueryParameters(
            new Dictionary<string, object?>
            {
                ["page"] = pageNo + 1,
            }
        );
        NavManager.NavigateTo(uri, false);
        StateHasChanged();
    }

    private class PageStatistics(string betterDivCutoff, string currentDivCutoff, string currentDivWindow)
    {
        public string BetterDivCutoff { get; set; } = betterDivCutoff;
        public string CurrentDivCutoff { get; set; } = currentDivCutoff;
        public string CurrentDivWindow { get; set; } = currentDivWindow;
    }

    private class RankStatistics(int rank, Time time)
    {
        public int Rank { get; set; } = rank;
        public Time Time { get; set; } = time;
    }

}